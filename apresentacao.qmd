---
title: "Do Código ao Compartilhamento"
subtitle: "Trabalhando com RStudio, Quarto e Github"
author: "César A. Galvão"
format: 
  revealjs:
    theme: default
    incremental: true
    footer: "Slides por César Galvão, feito com [Quarto](https://quarto.org/docs/presentations/revealjs/index.html). Código disponível no [GitHub](https://github.com/cesar-galvao/curso_quarto_GYN)."
---

# Dia 1

Apresentação, revisões, Rproject e Quarto

## Agradecimentos

\
\

::: {layout-ncol="3"}
![](imagens/lamp.jpeg){fig-align="center" width="65%"}

![](imagens/Untitled.jpeg){fig-align="center" width="65%"}

![](imagens/unb.jpg){fig-align="center" width="80%"}
:::

## Eu

![](imagens/cesar-git.jpeg)

## O curso

\

Durante as 9 horas de aula, nos dedicaremos a:

-   Aprender o fluxo de trabalho do RStudio
-   Aprender o fluxo de trabalho do Git (uso do GitHub)
-   Produzir um documento no Quarto

::: {layout-ncol="3" layout-valign="center"}
![](imagens/RStudio_Logo.png){fig-align="center" width="65%"}

![](imagens/GitHub_Invertocat_Logo.svg.png){fig-align="center" width="40%"}

![](imagens/quarto.png){fig-align="center" width="65%"}
:::

## O curso

\
Integraremos esses assuntos para que tenhamos ao final:

-   Github configurado com pelo menos 1 repositório
-   1 relatório e 1 apresentação no Quarto
-   Código do(s) nosso(s) documento(s) hospedado(s) no Github

## Pedidos, Recomendações, Lembretes

\

::: callout-warning
Não é um curso de análise, mas de programação para cientistas.
:::

::: callout-warning
Tentem não avançar passos à frente do que está sendo apresentado nem a ler conteúdo da interface enquanto progredimos. Eu apontarei o que é importante no momento.
:::

## Pedidos, Recomendações, Lembretes

\

::: callout-tip
Leiam os detalhes depois das aulas!
:::

::: callout-tip
Façam perguntas! (Povo online por favor me interrompa)
:::

## Fluxo da análise

\

![Fonte: R for DataScience (2e) - H. Wickham, M. Çetinkaya-Rundel e G. Grolemund](imagens/fluxo_analise.png){fig-align="center" width="80%"}

# Fluxo de trabalho RStudio

Primeira tarefa: crie uma pasta para os arquivos desse curso!

\

::: {layout="[[-30,20,-30]]"}
![](imagens/RStudio_Logo.png){fig-align="right"}
:::

## Revisão - CODE ALONG

Em um script, vamos revisar:

-   Abrir um arquivo novo
-   library em `palmerpenguins` e `tidyverse` e explorar o que a mensagem inicial está nos avisando.
-   glimpse, mostrar o que tem no banco de dados
-   verbos `mutate`, `filter`, `summarize` + (`.by`) sem pipe
-   verbos usando pipe (`%>%` ou `|>`)
-   `getwd()`
-   ler um csv (bivariate, enviar por email) -- caminho completo

## Rproject

\

Temos um problema, que é um caminho enorme para a leitura do `.csv` não replicável em outras máquinas.

\

Rproject cria um ambiente contido de pastas e toma como referencial de todos os arquivos executáveis a pasta em que o `.Rproj` se localiza.

::: {layout="[[-30,20,-30]]"}
![](imagens/rproj.png){fig-align="center" layout-valign="top"}
:::

## Rproject - CODE ALONG

\

Vamos abrir um Rproj e tentar responder:

-   O que muda na interface do RStudio?
-   Qual é a diferença quando executamos `getwd()`?
-   Leia o arquivo csv considerando o novo ambiente.

## Pastas *vs* .Rproj

\

Problemas de códigos em pastas comuns:

-   Replicabilidade de *path* (ex: `C:\Bahia\Meus Documentos\...`)
-   Não aproveita outras integrações do .rmd, .qmd, etc

## Pastas *vs* .Rproj

\

Vantagens de se usar .Rproj:

-   Seu código fica transportável
-   Elimina problemas de caminhos
-   Aproveita integrações, como a publicação dessa apresentação no GitHub como uma página!

# Intervalo

20 minutos

# Quarto

\

Tá na hora de produzir documento!

\
\

::: {layout="[[-30,20,-30]]"}
![](imagens/quarto.png){fig-align="right"}
:::

## Quarto (notebook)

O propósito inicial desse tipo de documento que chamamos de notebook é ser um caderno de laboratório. Em python temos o Jupyter!

-   Pensamos
-   Programamos/Calculamos
-   Tiramos conclusões

Isso é muito poderoso pois permite que você não perca ideias e tenha seus pensamentos e seu trabalho num lugar só.

## Quarto - CODE ALONG

Vamos abrir um documento `.qmd` [dentro do nosso projeto]{.underline} e:

-   Ver as etapas para abrir um documento (hoje apenas HTML)
-   Avaliar a estrutura do documento
    -   YAML
    -   Texto e títulos
    -   Blocos de código (inserir e calcular antes de renderizar)

## Quarto - CODE ALONG

No nosso documento `.qmd`:

-   O que acontece com o bloco de código depois do Render?
-   Quais são as [opções de bloco de código](https://r4ds.hadley.nz/quarto#code-chunks)?
-   Algum arquivo novo aparece no diretório depois do Render?

## Quarto - exercício

Usando nosso código anterior com sintaxe `tidyverse`, ou se souber mais *seja criativo*:

-   Insira dois blocos de código -- um deve mostrar o código no HTML e outro apenas o resultado
-   Fale sobre o que calculou.

```{{r}}
penguins |>
   mutate(tamanho_nadadeira = 
              if_else(flipper_length_mm > 200, "longa", "curta")) |>
   filter(!is.na(tamanho_nadadeira)) |>
   summarise(media_bico = mean(bill_length_mm),
              desv_pad_bico = sd(bill_length_mm),
              .by = tamanho_nadadeira)
```

## Editor: visual ou código

\

Vamos experimentar alternar nosso documento com um texto e os blocos de código entre os modos visual e Source!

O que parece diferente?

## Editor visual - CODE ALONG

\

Em um `.qmd`, adicione:

-   tabela no visual (depois faremos uma bonita usando o kable)
-   figuras
-   matemática/latex
-   referencias bibliograficas + referencias cruzadas (internas ao documento)

## Recursos

\

[Fluxo de trabalho Rproject](https://youtu.be/A52Q50sIQ-I?si=tEWPX348mcwH_ZjR)

[R4DS - R for DataScience 2e](https://r4ds.hadley.nz/)

[Novidades Tidyverse](https://www.tidyverse.org/blog/2023/08/teach-tidyverse-23/?mkt_tok=NzA5LU5YTi03MDYAAAGQ5fTVHPUSOcW39mLKapFgqb_pX1Qlq-dDO-LMNAUPmQvVQA5dcte6TWKYcvMCwsfLLah05xNVkB5z_oysYgPd6CTaqaa8VaBch1HPunvxw6w)

[Guia Quarto](https://quarto.org/docs/guide/)

# Dia 2

Git, relatórios em PDF

## Recapitulando

Vimos:

-   Uso de sintaxe `tidyverse` para termos um código mais inteligível
-   Uso do Rproject para termos um código transportável
-   Uso do Quarto para produzirmos um documento básico e seus componentes
    -   Cabeçalho
    -   Texto
    -   Blocos de código e suas opções

# Git

Compartilhando e guardando código!

::: {layout="[[-20,10,-20]]"}
![](imagens/git-logo.png){fig-align="center" layout-valign="top"}
:::

## Git: o que é? O que come?

**Definição:** sistema de controle distribuído que monitora alterações em qualquer conjunto de arquivos de computador, comumente usado para coordenar trabalho entre programadores que estão desenvolvendo código fonte de forma colaborativa. Seus objetivos incluem velocidade, integridade e suporte para fluxos de trabalho distribuídos e não lineares.

::: {layout="[[-70,30]]"}
![](imagens/smile2.jpg){fig-align="right" layout-valign="top"}
:::

## Git: o que é? O que come?

Pescando palavras-chave: é um sistema para trabalhar em grupo de forma assíncrona com foco na velocidade de colaboração e integridade do código, garantindo um controle de versões.

## Git: fluxo de trabalho

![](imagens/git-flow.png)

## Git: fluxo de trabalho

Dando um zoom em cada vértice da imagem anterior:

-   **Commit**: etapa de preparo que fecha um pacote de alterações
-   **Push**: manda para o servidor o pacote para ser integrado ao branch em que está trabalhando
-   **Pull**: quando se trabalha com mais pessoas, puxa as alterações que fizeram para que você trabalhe em uma versão atualizada.

## Git: operação

Podemos usar:

-   Terminal
-   RStudio
-   Aplicativo desktop
-   etc

O ideal é aprender o que melhor combina com as suas habilidades!

## GitHub

Vamos explorar a interface do Github!

-   Dashboard
-   Menu lateral
-   Perfil
-   Repositórios

## Repositórios

Repositório é o conceito principal por trás da funcionalidade do GIT.

É como um drive, com registro de todas as alterações feitras e por quem foram feitas. Assim, podemos resgatar um estado anterior!

Vamos baixar e abrir o github desktop e conectar a nossa conta Github em <https://desktop.github.com/>.

## Criando um repositório - CODE ALONG

Formas de criar um repositório:

-   Github
-   Github desktop -- vamos usar esse

Com o repositório criado, vamos povoar com arquivos

-   Verificar no github desktop as alterações
-   Commit
-   Push
-   Ver as alterações no GitHub web

## Clonando um repositório - CODE ALONG

Copiando ou clonando um repositório de um colega

-   Acessar o repositório do seu colega
-   Baixar o .zip OU copiar a URL
-   Usar o github desktop para clonar

Vamos reunir o nome dos repositórios de todos!

## Finalizando

Exemplo:

-   Tradução R4DS: <https://github.com/orgs/cienciadedatos/projects/2/views/1>
-   Recurso: <https://happygitwithr.com/>

# Relatórios com Quarto

::: {layout="[[-20,20,-20]]"}
![](imagens/fig-relatorios.png){fig-align="center" layout-valign="top"}
:::

## Composição de artigo/relatório

\
\
Quais elementos compõem um artigo ou relatório?

Que tipos de leitores temos?

Vamos visitar o guia básico de PDF no Quarto.

## Composição de artigo/relatório

Temos 20 minutos para:

::: columns
::: {.column width="50%"}
-   Criar um PDF no editor visual com o máximo de coisas que listamos
-   É **necessário** ter um gráfico em ggplot
-   É **necessário** ter uma referência cruzada para uma tabela, equação ou figura
-   **Usem o chatGPT**.
:::

::: {.column width="50%"}
Recursos:

-   <https://quarto.org/docs/output-formats/pdf-basics.html>
-   <https://quarto.org/docs/reference/formats/pdf.html>
:::
:::

## Apresentação

Precisamos de 4 ou 5 voluntários para apresentarmos os relatórios:

-   De quem sentiu que falhou miseravelmente
-   De quem sente que teve muito sucesso

## Integrando

Vamos subir nossos relatórios prontos nos próprios gits.

Clonem o repositório que gostaram mais ou copiem o código direto do repositório.

## Recapitulando

-   Trabalhamos com Git
-   Usamos o Github Desktop para operar o repositório
-   Produzimos um relatório em PDF
-   Atualizamos nosso repositório
-   Copiamos um repositório do nosso interesse

## Amanhã

Teremos uma sessão mais curta!

-   Apresentações
-   Github pages
-   Outros formatos

# Dia 3

## Apresentações

Vimos que para gerar apresentações, devemos usar o `yaml` básico da seguite forma:

``` yaml
title: "Minha apresentação"
format: revealjs
```

## Hospedando como uma página GitHub

Para hospedar a sua apresentação como uma página no GitHub, que ficará online para temos alguns critérios:

-   Temos um projeto, ou seja, uma pasta em que constam os documentos necessários para o seu trabalho e um arquivo `.Rproj`;
-   Esse projeto já precisa estar hospedado como um repositório no GitHub;

## Hospedando como uma página GitHub

Em seguida, é preciso acessar o documento `_quarto.yml` e fazer a seguinte alteração e **salvar** o documento em seguida:

``` yaml
project:
  type: website
  output-dir: docs
  title: "nome_do_seu_projeto"
```

O tipo do projeto deve ser 'website' e o diretório de saída deve ser docs. Verifique que, depois de salvar o documento e renderizar a apresentação, existe uma pasta `docs` com o HTML da apresentação.

## Hospedando como uma página GitHub

Por último, dentro do seu repositório na página web do Github, acesse `Settings` no menu horizontal superior e procure `pages` no menu lateral esquerdo.

Será aberta uma página com título `GitHub Pages`. Em `Build and deployment`, selecione:

-   Source: Deploy from a branch
-   Branch: `main` (se for essa que estiver usando) e logo a seguir `/docs`. Aperte o botão [Save]{.underline}.

## Hospedando como uma página GitHub

Em alguns minutos, sua página deve estar disponível e o endereço é verificado na mesma página em que ajustou o deploy.

Verifique que há uma página online na página principal do repositório nas informações disponíveis na lateral direita em `Deployments`. É possível que você precise rolar a página para baixo.

# Obrigado por participar do curso!