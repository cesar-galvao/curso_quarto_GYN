---
title: "Do Código ao Compartilhamento"
subtitle: "Trabalhando com RStudio, Quarto e Github"
author: "César A. Galvão"
format: 
  revealjs:
    theme: default
    incremental: true
    footer: "Slides por César Galvão, feito com [Quarto](https://quarto.org/docs/presentations/revealjs/index.html). Código disponível no [GitHub](https://github.com/cesar-galvao/curso_quarto_GYN)."
---

# Dia 1

Apresentação, revisões, Rproject e Quarto

## Agradecimentos

\
\

::: {layout-ncol="3"}
![](imagens/lamp.jpeg){fig-align="center" width="65%"}

![](imagens/Untitled.jpeg){fig-align="center" width="65%"}

![](imagens/unb.jpg){fig-align="center" width="80%"}
:::


## Eu

![](imagens/cesar-git.jpeg)

## O curso
\

Durante as 9 horas de aula, nos dedicaremos a:

-   Aprender o fluxo de trabalho do RStudio
-   Aprender o fluxo de trabalho do Git (uso do GitHub)
-   Produzir um documento no Quarto


::: {layout-ncol="3"}
![](imagens/RStudio_Logo.png){fig-align="center" width="65%"}

![](imagens/GitHub_Invertocat_Logo.svg.png){fig-align="center" width="40%"}

![](imagens/quarto.png){fig-align="center" width="65%"}
:::

## O curso
\
Integraremos esses assuntos para que tenhamos ao final:

-   Github configurado com pelo menos 1 repositório
-   1 relatório e 1 apresentação no Quarto
-   Código do(s) nosso(s) documento(s) hospedado(s) no Github

## Pedidos, Recomendações, Lembretes
\

::: callout-warning
Não é um curso de análise, mas de programação para cientistas.
:::


::: callout-warning
Tentem não avançar passos à frente do que está sendo apresentado nem a ler conteúdo da interface enquanto progredimos. Eu apontarei o que é importante no momento.
:::

## Pedidos, Recomendações, Lembretes

\

::: callout-tip
Leiam os detalhes depois das aulas!
:::

::: callout-tip
Façam perguntas! (Povo online por favor me interrompa)
:::

## Fluxo da análise

\

![Fonte: R for DataScience (2e) - H. Wickham, M. Çetinkaya-Rundel e G. Grolemund](imagens/fluxo_analise.png){fig-align="center" width="100%"}

# Fluxo de trabalho RStudio

Primeira tarefa: crie uma pasta para os arquivos desse curso!

## Revisão - CODE ALONG

Em um script, vamos revisar:

- Abrir um arquivo novo
- library em `palmerpenguins` e  `tidyverse` e explorar o que a mensagem inicial está nos avisando.
- glimpse, mostrar o que tem no banco de dados
- verbos `mutate`, `filter`, `summarize` + (`.by`) sem pipe
- verbos usando pipe (`%>%` ou `|>`)
- `getwd()`
- ler um csv (bivariate, enviar por email) -- caminho completo

## Rproject

\

Temos um problema, que é um caminho enorme para a leitura do `.csv` não replicável em outras máquinas.

\

Rproject cria um ambiente contido de pastas e toma como referencial de todos os arquivos executáveis a pasta em que o `.Rproj` se localiza.

## Rproject - CODE ALONG

\

Vamos abrir um Rproj e tentar responder: 

- O que muda na interface do RStudio?
- Qual é a diferença quando executamos `getwd()`?
- Leia o arquivo csv considerando o novo ambiente.


## Pastas *vs* .Rproj

\

Problemas de códigos em pastas comuns:

- Replicabilidade de *path* (ex: `C:\Bahia\Meus Documentos\...`)
- Não aproveita outras integrações do .rmd, .qmd, etc

## Pastas *vs* .Rproj

\

Vantagens de se usar .Rproj:

- Seu código fica transportável
- Elimina problemas de caminhos
- Aproveita integrações, como a publicação dessa apresentação no GitHub como uma página!

# Intervalo

20 minutos

